const express = require('express');
const { MongoClient, ObjectId } = require('mongodb');
const router = express.Router();

// Configuration MongoDB
const MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DB_NAME = 'TestIkos'; // ‚Üê Remplacez par votre nom de DB
const COLLECTION_NAME = 'TestsModels';

// Middleware de debug
router.use((req, res, next) => {
  console.log(`üåê ${req.method} ${req.originalUrl} - Params:`, req.params);
  next();
});

// Route de test direct MongoDB
router.get('/test/direct', async (req, res) => {
  let client;
  try {
    console.log('üîå Connexion directe MongoDB...');
    
    // Connexion directe
    client = new MongoClient(MONGO_URI);
    await client.connect();
    
    const db = client.db(DB_NAME);
    const collection = db.collection(COLLECTION_NAME);
    
    // Test 1: Compter tous les documents
    const totalDocs = await collection.countDocuments();
    console.log(`üìä Total documents: ${totalDocs}`);
    
    // Test 2: Lister tous les modules
    const allDocs = await collection.find({}).toArray();
    console.log('üìã Tous les documents:');
    allDocs.forEach(doc => {
      console.log(`  - Module: ${doc.module}, ID: ${doc._id}`);
    });
    
    // Test 3: Rechercher CMD970 directement
    const cmd970 = await collection.findOne({ module: "CMD970" });
    console.log('üéØ CMD970 trouv√©:', cmd970 ? 'OUI ‚úÖ' : 'NON ‚ùå');
    
    if (cmd970) {
      console.log(`üìö Formations dans CMD970: ${cmd970.formations?.length || 0}`);
    }
    
    res.json({
      success: true,
      totalDocuments: totalDocs,
      modulesDisponibles: allDocs.map(doc => doc.module),
      cmd970Trouve: !!cmd970,
      cmd970Data: cmd970 ? {
        module: cmd970.module,
        formations: cmd970.formations,
        nombre_formations: cmd970.formations?.length || 0
      } : null
    });
    
  } catch (error) {
    console.error('‚ùå Erreur MongoDB direct:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur MongoDB', 
      error: error.message 
    });
  } finally {
    if (client) {
      await client.close();
      console.log('üîå Connexion MongoDB ferm√©e');
    }
  }
});

// Route principale avec MongoDB natif
router.get('/:moduleId/scenarios', async (req, res) => {
  let client;
  try {
    const { moduleId } = req.params;
    console.log(`üîç Recherche sc√©narios pour module: ${moduleId}`);
    
    // Connexion MongoDB
    client = new MongoClient(MONGO_URI);
    await client.connect();
    
    const db = client.db(DB_NAME);
    const collection = db.collection(COLLECTION_NAME);
    
    // Recherche directe
    const moduleDoc = await collection.findOne({ module: moduleId });
    
    if (!moduleDoc) {
      console.log(`‚ùå Module non trouv√©: ${moduleId}`);
      return res.status(404).json({ 
        success: false, 
        message: `Module ${moduleId} non trouv√©` 
      });
    }
    
    console.log(`‚úÖ Module trouv√©: ${moduleDoc.module}`);
    console.log(`üìö Nombre de formations: ${moduleDoc.formations?.length || 0}`);
    
    res.json({ 
      success: true, 
      module: moduleDoc.module,
      data: moduleDoc.formations || [],
      total: moduleDoc.formations?.length || 0
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des sc√©narios:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erreur de r√©cup√©ration des sc√©narios', 
      error: error.message 
    });
  } finally {
    if (client) {
      await client.close();
    }
  }
});

// Route pour module unique
router.get('/:moduleId', async (req, res) => {
  let client;
  try {
    const { moduleId } = req.params;
    console.log('üîç Recherche module unique:', moduleId);
    
    client = new MongoClient(MONGO_URI);
    await client.connect();
    
    const db = client.db(DB_NAME);
    const collection = db.collection(COLLECTION_NAME);
    
    const moduleDoc = await collection.findOne({ module: moduleId });
    
    if (!moduleDoc) {
      console.log('‚ùå Module non trouv√©:', moduleId);
      return res.status(404).json({ success: false, message: 'Module non trouv√©' });
    }
    
    console.log('‚úÖ Module trouv√©:', moduleDoc.module);
    res.json({ success: true, data: moduleDoc });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du module:', error);
    res.status(500).json({ success: false, message: 'Erreur serveur' });
  } finally {
    if (client) {
      await client.close();
    }
  }
});

module.exports = router;
